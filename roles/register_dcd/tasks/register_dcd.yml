---
- name: set facts that are used for the following tasks
  set_fact:
   register_dcd_server_hostname: 'item'
   register_dcd_server: "{{ hostvars[item]['discoveryip'].split('/')[0] }}"
   register_dcd_listener: "{{ hostvars[item]['discoveryip'].split('/')[0] }}"

- name: Ensure the DCD server IP address is provided
  fail:
    msg: "Please change the register_dcd_server variable to be the IP address of the DCD device."
  when: register_dcd_server == 'localhost'

- name: Set the listener if it is not specified
  set_fact:
    register_dcd_listener: "{{ register_dcd_server }}"
  when: register_dcd_listener == 'localhost'

- name: Check that device is not already registered
  uri:
    url: "https://{{ provider.server }}:{{ provider.server_port }}/mgmt/shared/resolver/device-groups/cm-esmgmt-logging-group/devices"
    timeout: "{{ register_cm_timeout }}"
    validate_certs: "{{ register_cm_validate_certs }}"
    headers:
      X-F5-Auth-Token: "{{ f5_auth_token }}"
  register: regchk

- name: Get devices from CM
  set_fact:
    devices: "{{ regchk.json | json_query('items[*].address') }}"

- import_tasks: setup-dcd-device.yaml
  when: register_dcd_server not in devices

- name: Get DCD Device Reference
  uri:
    url: "https://{{ provider.server }}:{{ provider.server_port }}/mgmt/shared/resolver/device-groups/cm-esmgmt-logging-group/devices/?$select=selfLink,properties&$filter=address+eq+'{{ register_dcd_server }}'"
    timeout: "{{ register_cm_timeout }}"
    validate_certs: "{{ register_cm_validate_certs }}"
    headers:
      X-F5-Auth-Token: "{{ f5_auth_token }}"
  register: rdcd


- name: Ensure that there is only one result
  assert:
    that:
      - rdcd.json.totalItems|default(0) == 1

- name: activate all services on dcd
  include_tasks: activate_all_services.yaml
  when: hostvars[inventory_hostname]['haprimary']
